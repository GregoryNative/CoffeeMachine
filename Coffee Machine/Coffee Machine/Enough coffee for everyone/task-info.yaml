type: edu
custom_name: stage3
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring coffee into the cup");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
        }
    ////    private CoffeeMachinePrinter printer = new CoffeeMachinePrinter("Delonghi");
    //
    //    // PRIVATE COFFEE MAKER METHODS
    //    private void start() {
    //        print("Starting to make a coffee");
    ////        this.printer.print("Starting to make a coffee");
    //    }
    //
    //    private void grind() {
    //        print("Grinding coffee beans");
    //    }
    //
    //    private void boil() {
    //        print("Boiling water");
    //    }
    //
    //    private void mix() {
    //        print("Mixing boiled water with crushed coffee beans");
    //    }
    //
    //    private void pour() {
    //        print("Pouring some milk into the cup");
    //    }
    //
    //    // PRINTER METHODS
    //    private void print(String str) {
    //        System.out.println(str);
    //    }
    //
    //    // PUBLIC METHODS
    //    public void makeCoffee() {
    //        this.start();
    //        this.grind();
    //        this.boil();
    //        this.mix();
    //        this.pour();
    //
    //        print("Coffee is ready!");
    //    }
    }
  learner_created: false
- name: src/machine/Application.java
  visible: true
  text: |
    package machine;

    public class Application {
        public static void main(String[] args) {
    //        CoffeeMachine machine = new CoffeeMachine();
    //
    //        machine.makeCoffee();

            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
    //        this.printer.print("Starting to make a coffee");
        }
        // PRINTER METHODS
        private static void print(String str) {
            System.out.println(str);
        }

    }
  learner_created: false
- name: src/machine/CoffeeMachinePrinter.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachinePrinter {
        private String name;

        public CoffeeMachinePrinter(String name) {
            this.name = name;
        }

        public void print(String str) {
            String message = name + ": " + str;

            System.out.println(message);
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;


    class TestClue {
        boolean cond;
        int num;
        boolean showTests;
        TestClue(boolean c, int n, boolean showTests) {
            cond = c;
            num = n;
            this.showTests = showTests;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, true))
                    .setInput("300\n65\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("600\n153\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n150\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n1500\n45\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, true))
                    .setInput("599\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 867, true))
                    .setInput( "345640\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 1548, true))
                    .setInput("345640\n434230\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 172, true))
                    .setInput( "34564\n43423\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, false))
                    .setInput("399\n112\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 3, false))
                    .setInput("2400\n249\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1, false))
                    .setInput("1400\n1500\n44\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, false))
                    .setInput("500\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 171, false))
                    .setInput("34564\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1547, false))
                    .setInput("345640\n434230\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 868, false))
                    .setInput("345640\n43423\n23234\n19246")

            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split(":");
            String userOutput = lines[lines.length - 1].trim();
            String loweredOutput = userOutput.toLowerCase();
            boolean ans = clue.cond;
            int amount = clue.num;
            if (ans) {
                if (amount > 0) {
                    boolean isCorrect =
                        loweredOutput.contains(Integer.toString(amount))
                         && loweredOutput.contains("yes");

                    if (isCorrect) {
                        return CheckResult.correct();
                    } else {

                        String rightOutput =
                            "Yes, I can make that amount of coffee" +
                                " (and even " + amount + " more than that)";

                        if (clue.showTests) {
                            return new CheckResult(false,
                                "Your output:\n" +
                                    userOutput +
                                    "\nRight output:\n" +
                                    rightOutput);
                        } else {
                            return CheckResult.wrong("");
                        }
                    }
                }

                String rightOutput =
                    "Yes, I can make that amount of coffee";

                if (loweredOutput.equals(rightOutput.toLowerCase())) {
                    return CheckResult.correct();
                } else {
                    if (clue.showTests) {
                        return new CheckResult(false,
                            "Your output:\n" +
                                userOutput +
                                "\nRight output:\n" +
                                rightOutput);
                    } else {
                        return CheckResult.wrong("");
                    }
                }

            } else {
                boolean cond1 = loweredOutput.contains("no");
                boolean cond2 = loweredOutput.contains(Integer.toString(amount));

                if (cond1 && cond2) {
                    return CheckResult.correct();
                } else {

                    String rightOutput = "No, I can make only " +
                        amount +" cup(s) of coffee";

                    if (clue.showTests) {
                        return new CheckResult(false,
                            "Your output:\n" +
                            userOutput +
                            "\nRight output:\n" +
                            rightOutput);
                    } else {
                        return CheckResult.wrong("");
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachineCalculator.java
  visible: true
  text: "package machine;\n\nimport java.util.EnumMap;\n\npublic class CoffeeMachineCalculator\
    \ {\n    private static enum Attribute {\n        WATER,\n        MILK,\n    \
    \    COFFEE_BEANS\n    }\n\n    private CoffeeMachinePrinter printer;\n    \n\
    \    private int waterMl;\n    private int milkMl;\n    private int coffeeBeansG;\n\
    \n    public static CoffeeMachineCalculator create(int waterMl, int milkMl, int\
    \ coffeeBeansG) {\n        return new CoffeeMachineCalculator(waterMl, milkMl,\
    \ coffeeBeansG);\n    }\n\n    public CoffeeMachineCalculator withPrinter(CoffeeMachinePrinter\
    \ printer) {\n        this.printer = printer;\n\n        return this;\n    }\n\
    \    \n    public CoffeeMachineCalculator(int waterMl, int milkMl, int coffeeBeansG)\
    \ {\n       this.waterMl = waterMl;\n       this.milkMl = milkMl;\n       this.coffeeBeansG\
    \ = coffeeBeansG;\n    }\n\n    private EnumMap<Attribute, Integer> calculate(int\
    \ cups) {\n        EnumMap<Attribute, Integer> map = new EnumMap<>(Attribute.class);\n\
    \n        map.put(Attribute.WATER, cups * this.waterMl);\n        map.put(Attribute.MILK,\
    \ cups * this.milkMl);\n        map.put(Attribute.COFFEE_BEANS, cups * this.coffeeBeansG);\n\
    \n        return map;\n    }\n\n    public void calculateAndPrint(int cups) {\n\
    \        EnumMap<Attribute, Integer> map = calculate(cups);\n\n        this.printer.print(\"\
    For \" + cups + \" cups of coffee you will need:\");\n        this.printer.print(map.get(Attribute.WATER)\
    \ + \" ml of water\");\n        this.printer.print(map.get(Attribute.MILK) + \"\
    \ ml of milk\");\n        this.printer.print(map.get(Attribute.COFFEE_BEANS) +\
    \ \" g of coffee beans\");\n    }\n\n    public void prompt() {\n        this.printer.print(\"\
    Write how many cups of coffee you will need:\");\n\n        int countOfCups =\
    \ this.printer.askNumber();\n\n        calculateAndPrint(countOfCups);\n    }\n\
    }"
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/177/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/33/stages/177/implement">JetBrains
    Academy</a>
  time: Wed, 19 Aug 2020 16:47:46 UTC
record: 3
