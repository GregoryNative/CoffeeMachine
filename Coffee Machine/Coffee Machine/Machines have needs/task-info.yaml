type: edu
custom_name: stage2
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring coffee into the cup");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
        }
    ////    private CoffeeMachinePrinter printer = new CoffeeMachinePrinter("Delonghi");
    //
    //    // PRIVATE COFFEE MAKER METHODS
    //    private void start() {
    //        print("Starting to make a coffee");
    ////        this.printer.print("Starting to make a coffee");
    //    }
    //
    //    private void grind() {
    //        print("Grinding coffee beans");
    //    }
    //
    //    private void boil() {
    //        print("Boiling water");
    //    }
    //
    //    private void mix() {
    //        print("Mixing boiled water with crushed coffee beans");
    //    }
    //
    //    private void pour() {
    //        print("Pouring some milk into the cup");
    //    }
    //
    //    // PRINTER METHODS
    //    private void print(String str) {
    //        System.out.println(str);
    //    }
    //
    //    // PUBLIC METHODS
    //    public void makeCoffee() {
    //        this.start();
    //        this.grind();
    //        this.boil();
    //        this.mix();
    //        this.pour();
    //
    //        print("Coffee is ready!");
    //    }
    }
  learner_created: false
- name: src/machine/Application.java
  visible: true
  text: |
    package machine;

    public class Application {
        public static void main(String[] args) {
    //        CoffeeMachine machine = new CoffeeMachine();
    //
    //        machine.makeCoffee();

            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
    //        this.printer.print("Starting to make a coffee");
        }
        // PRINTER METHODS
        private static void print(String str) {
            System.out.println(str);
        }

    }
  learner_created: false
- name: src/machine/CoffeeMachinePrinter.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachinePrinter {
        private String name;

        public CoffeeMachinePrinter(String name) {
            this.name = name;
        }

        public void print(String str) {
            String message = name + ": " + str;

            System.out.println(message);
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;


    public class CoffeeMachineTest extends StageTest<String> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .setInput("25")
                    .setAttach("25"),

                new TestCase<String>()
                    .setInput("125")
                    .setAttach("125"),

                new TestCase<String>()
                    .setInput("1")
                    .setAttach("1"),

                new TestCase<String>()
                    .setInput("123")
                    .setAttach("123")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String[] lines = reply.split("\\n");
            if (lines.length < 3) {
                return new CheckResult(false,
                    "Output contains less than 3 lines, but should output at least 3 lines");
            }
            String[] last3Lines = {
                lines[lines.length - 3],
                lines[lines.length - 2],
                lines[lines.length - 1]
            };

            int cups = Integer.parseInt(clue);
            boolean water = false, milk = false, beans = false;

            for(String line : last3Lines) {
                line = line.toLowerCase();

                if(line.contains("milk")) {
                    milk = line.contains(Integer.toString(cups * 50));
                    if (!milk) {
                        return new CheckResult(false,
                            "For the input " + clue + " your program output:\n\"" +
                                line + "\"\nbut the amount of milk should be " + (cups * 50));
                    }

                } else if(line.contains("water")) {
                    water = line.contains(Integer.toString(cups * 200));
                    if (!water) {
                        return new CheckResult(false,
                            "For the input " + clue + " your program output:\n" +
                                line + "\nbut the amount of water should be " + (cups * 200));
                    }

                } else if(line.contains("beans")) {
                    beans = line.contains(Integer.toString(cups * 15));
                    if (!beans) {
                        return new CheckResult(false,
                            "For the input " + clue + " your program output:\n" +
                                line + "\nbut the amount of beans should be " + (cups * 15));
                    }


                } else {
                    return new CheckResult(false,
                        "One of the last 3 lines " +
                            "doesn't contain \"milk\", \"water\" or \"beans\"");
                }
            }

            if (!water) {
                return new CheckResult(false,
                    "There is no line with amount of water");
            }

            if (!milk) {
                return new CheckResult(false,
                    "There is no line with amount of milk");
            }

            if (!beans) {
                return new CheckResult(false,
                    "There is no line with amount of coffee beans");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachineCalculator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/176/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/33/stages/176/implement">JetBrains
    Academy</a>
  time: Tue, 18 Aug 2020 16:31:40 UTC
record: 2
