type: edu
custom_name: stage4
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring coffee into the cup");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
        }
    ////    private CoffeeMachinePrinter printer = new CoffeeMachinePrinter("Delonghi");
    //
    //    // PRIVATE COFFEE MAKER METHODS
    //    private void start() {
    //        print("Starting to make a coffee");
    ////        this.printer.print("Starting to make a coffee");
    //    }
    //
    //    private void grind() {
    //        print("Grinding coffee beans");
    //    }
    //
    //    private void boil() {
    //        print("Boiling water");
    //    }
    //
    //    private void mix() {
    //        print("Mixing boiled water with crushed coffee beans");
    //    }
    //
    //    private void pour() {
    //        print("Pouring some milk into the cup");
    //    }
    //
    //    // PRINTER METHODS
    //    private void print(String str) {
    //        System.out.println(str);
    //    }
    //
    //    // PUBLIC METHODS
    //    public void makeCoffee() {
    //        this.start();
    //        this.grind();
    //        this.boil();
    //        this.mix();
    //        this.pour();
    //
    //        print("Coffee is ready!");
    //    }
    }
  learner_created: false
- name: src/machine/Application.java
  visible: true
  text: |
    package machine;

    public class Application {
        public static void main(String[] args) {
    //        CoffeeMachine machine = new CoffeeMachine();
    //
    //        machine.makeCoffee();

            System.out.println("Starting to make a coffee");
            System.out.println("Grinding coffee beans");
            System.out.println("Boiling water");
            System.out.println("Mixing boiled water with crushed coffee beans");
            System.out.println("Pouring some milk into the cup");
            System.out.println("Coffee is ready!");
    //        this.printer.print("Starting to make a coffee");
        }
        // PRINTER METHODS
        private static void print(String str) {
            System.out.println(str);
        }

    }
  learner_created: false
- name: src/machine/CoffeeMachinePrinter.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachinePrinter {
        private String name;

        public CoffeeMachinePrinter(String name) {
            this.name = name;
        }

        public void print(String str) {
            String message = name + ": " + str;

            System.out.println(message);
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        String string;
        TestClue(String s) {
            string = s;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue("take\n"))
                    .setInput("take\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n1\n"))
                    .setInput("buy\n1\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n2\n"))
                    .setInput("buy\n2\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n3\n"))
                    .setInput("buy\n3\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("fill\n2001\n510\n101\n21\n"))
                    .setInput("fill\n2001\n510\n101\n21\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            String[] clueLines = clue.string.trim().split("\\n");
            String action = clueLines[0].trim();

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0].replace("$", "");
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }


            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            if (water0 != 400 || milk0 != 540 || beans0 != 120
                || cups0 != 9 || money0 != 550) {
                return new CheckResult(false,
                    "Initial setup is wrong: " +
                        "coffee machine should fe filled like " +
                        "stated in the description");
            }

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            if (action.equals("take")) {

                if (diffMilk != 0) {
                    return new CheckResult(false,
                        "After \"take\" action milk " +
                            "amount shouldn't be changed");
                }

                if (diffWater != 0) {
                    return new CheckResult(false,
                        "After \"take\" action water " +
                            "amount shouldn't be changed");
                }

                if (diffBeans != 0) {
                    return new CheckResult(false,
                        "After \"take\" action beans " +
                            "amount shouldn't be changed");
                }

                if (diffCups != 0) {
                    return new CheckResult(false,
                        "After \"take\" action cups " +
                            "amount shouldn't be changed");
                }

                if (money1 != 0) {
                    return new CheckResult(false,
                        "After \"take\" action money " +
                            "amount should be zero");
                }

                return CheckResult.correct();
            }

            else if (action.equals("buy")) {

                String option = clueLines[1].trim();

                if (option.equals("1")) {

                    if (diffWater != -250) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "water amount should be lowered by 250");
                    }

                    if (diffMilk != 0) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "milk amount should not be changed");
                    }

                    if (diffBeans != -16) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "beans amount should be lowered by 16");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 4) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "money amount should be increased by 4");
                    }

                    return CheckResult.correct();

                }

                else if (option.equals("2")) {

                    if (diffWater != -350) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -75) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -20) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 7) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }

                else if (option.equals("3")) {

                    if (diffWater != -200) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -100) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -12) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 6) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }
            }

            else if (action.equals("fill")) {

                int water_ = Integer.parseInt(clueLines[1]);
                int milk_ = Integer.parseInt(clueLines[2]);
                int beans_ = Integer.parseInt(clueLines[3]);
                int cups_ = Integer.parseInt(clueLines[4]);

                if (diffMoney != 0) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "money amount should not be changed");
                }

                if (diffWater != water_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "water amount expected to be increased by " + water_ +
                            " but was increased by " + diffWater);
                }

                if (diffMilk != milk_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "milk amount expected to be increased by " + milk_ +
                            " but was increased by " + diffMilk);
                }

                if (diffBeans != beans_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "beans amount expected to be increased by " + beans_ +
                            " but was increased by " + diffBeans);
                }

                if (diffCups != cups_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "cups amount expected to be increased by " + cups_ +
                            " but was increased by " + diffCups);
                }


                return CheckResult.correct();

            }

            throw new RuntimeException("Can't check the answer");
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachineCalculator.java
  visible: true
  text: "package machine;\n\nimport java.util.EnumMap;\n\npublic class CoffeeMachineCalculator\
    \ {\n    public static enum Attribute {\n        WATER,\n        MILK,\n     \
    \   COFFEE_BEANS\n    }\n\n    private CoffeeMachinePrinter printer;\n\n    private\
    \ int waterMl;\n    private int milkMl;\n    private int coffeeBeansG;\n\n   \
    \ public static CoffeeMachineCalculator create(int waterMl, int milkMl, int coffeeBeansG)\
    \ {\n        return new CoffeeMachineCalculator(waterMl, milkMl, coffeeBeansG);\n\
    \    }\n\n    public CoffeeMachineCalculator withPrinter(CoffeeMachinePrinter\
    \ printer) {\n        this.printer = printer;\n\n        return this;\n    }\n\
    \    \n    public CoffeeMachineCalculator(int waterMl, int milkMl, int coffeeBeansG)\
    \ {\n       this.waterMl = waterMl;\n       this.milkMl = milkMl;\n       this.coffeeBeansG\
    \ = coffeeBeansG;\n    }\n\n    public EnumMap<Attribute, Integer> calculate(int\
    \ cups) {\n        EnumMap<Attribute, Integer> map = new EnumMap<>(Attribute.class);\n\
    \n        map.put(Attribute.WATER, cups * this.waterMl);\n        map.put(Attribute.MILK,\
    \ cups * this.milkMl);\n        map.put(Attribute.COFFEE_BEANS, cups * this.coffeeBeansG);\n\
    \n        return map;\n    }\n\n    public void calculateAndPrint(int cups) {\n\
    \        EnumMap<Attribute, Integer> map = calculate(cups);\n\n        this.printer.print(\"\
    For \" + cups + \" cups of coffee you will need:\");\n        this.printer.print(map.get(Attribute.WATER)\
    \ + \" ml of water\");\n        this.printer.print(map.get(Attribute.MILK) + \"\
    \ ml of milk\");\n        this.printer.print(map.get(Attribute.COFFEE_BEANS) +\
    \ \" g of coffee beans\");\n    }\n\n    public void promptNeededForCups() {\n\
    \        this.printer.print(\"Write how many cups of coffee you will need:\");\n\
    \n        int countOfCups = this.printer.askNumber();\n\n        calculateAndPrint(countOfCups);\n\
    \    }\n\n    // Getters\n    public int getWaterMl() {\n        return waterMl;\n\
    \    }\n\n    public int getMilkMl() {\n        return milkMl;\n    }\n\n    public\
    \ int getCoffeeBeansG() {\n        return coffeeBeansG;\n    }\n}"
  learner_created: true
- name: src/machine/Coffee.java
  visible: true
  learner_created: true
- name: src/machine/CoffeeFactory.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/178/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/33/stages/178/implement">JetBrains
    Academy</a>
  time: Wed, 19 Aug 2020 19:18:44 UTC
record: 4
